#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char bigbuffer[9]; 
int bbend = 0; 

struct node {
	struct node *left;
	struct node *right;
	struct node *parent;
	int active;
	char charachter;
	int count;
};

int CodeFile(FILE *, FILE *);
int DecodeFile(FILE *, FILE *);
struct node* UnpackTree(FILE*);
void MakeTable(FILE*, int[]);
int ArrOptimalSize(int[]);
int InitTreeArr(struct node *, int[]);
int BuildTree(struct node *, int);
int FindMinEl(struct node *, int);
void Encode(char, char *, struct node *); 
char Decode(FILE *, struct node *); 
char Pack(char *); 
void Unpack(char, char *); 
void Submit(FILE *, char *);
void SubmitOne(FILE *, char); 
void PackTree(FILE *, struct node *, struct node *);
void Fetch(int, char *, FILE *); 
char FetchOne(FILE *);
void FreeTree(struct node *);

int main() {

	FILE *rawfile;
	rawfile = fopen("in.txt", "rb");

	FILE *zipped;
	zipped = fopen("out.txt", "wb");

	char buffer[3];
	fread(&buffer, 1, 3, rawfile);

	if (buffer[1] != '\r') {

		return 1;
	}	
	if (buffer[2] != '\n') {

		return 1;
	}

	if (buffer[0] == 'c') {

		CodeFile(rawfile, zipped);
	}
	if (buffer[0] == 'd') {

		DecodeFile(rawfile, zipped);
	}

	fclose(rawfile);
	fclose(zipped);
	return 0;
}

int CodeFile(FILE *huffmanfile, FILE *zippedfile) {

	int huffmantable[256];

	MakeTable(huffmanfile, huffmantable);

	int N = ArrOptimalSize(huffmantable); 
	struct node *treearr = (struct node *)malloc(sizeof(struct node) * N); 
	int end = InitTreeArr(treearr, huffmantable);
	int symbolcount = end;

	end = BuildTree(treearr, end);

	char *buffer = (char *)malloc(symbolcount); 

	fseek(huffmanfile, 0, SEEK_END);
	size_t datasize = ftell(huffmanfile) - 3;
	fwrite(&datasize, sizeof(size_t), 1, zippedfile);
	fseek(huffmanfile, 3, SEEK_SET);

	PackTree(zippedfile, treearr, &treearr[end - 1]);

	char charachter;
	while (fscanf(huffmanfile, "%c", &charachter) > 0) {

		Encode(charachter, buffer, treearr); 
		Submit(zippedfile, buffer); 
	}

	if (bbend != 0) { 

		unsigned char flushbyte = Pack(bigbuffer);
		fwrite(&flushbyte, 1, 1, zippedfile);
	}
	
	free(treearr);
	return 0;
}


void MakeTable(FILE *huffmanfile, int huffmantable[]) { 

	memset(huffmantable, 0, sizeof(int) * 256);
	unsigned char currchar = 0;

	while (!feof(huffmanfile)) { 
		fscanf(huffmanfile, "%c", &currchar);
		huffmantable[currchar]++;
	}
}

int ArrOptimalSize(int huffmantable[256]) {

	int N = 0;
	for (int i = 0; i < 256; i++) {
		if (huffmantable[i] != 0) {
			N++;
		}
	}
	N = 2 * N - 1;
	return N;
}

int InitTreeArr(struct node *treearr, int huffmantable[]) {

	int end = 0;
	for (int i = 0; i < 256; i++) {
		if (huffmantable[i] != 0) {
			treearr[end].count = huffmantable[i];
			treearr[end].charachter = (char)i;
			treearr[end].left = NULL;
			treearr[end].right = NULL;
			treearr[end].parent = NULL;
			treearr[end].active = 1;

			end++; 
		}
	}
	return end; 
}

int BuildTree(struct node *treearr, int end) {

	int symbolcount = end;
	for (int i = 0; i < symbolcount - 1; i++) {

		int min1, min2;
		min1 = FindMinEl(treearr, end);
		min2 = FindMinEl(treearr, end);
		treearr[min1].parent = &treearr[end];
		treearr[min2].parent = &treearr[end];
		treearr[end].left = &treearr[min1];
		treearr[end].right = &treearr[min2];
		treearr[end].parent = NULL;
		treearr[end].count = treearr[min1].count + treearr[min2].count;
		treearr[end].active = 1;

		end++;
	}
	return end; 
}

int FindMinEl(struct node *treearr, int end) {

	int currmin = 0;
	while (treearr[currmin].active == 0) {
		currmin++;
	}
	for (int i = 0; i < end; i++) {
		if ((treearr[i].count < treearr[currmin].count) && treearr[i].active == 1) {
			currmin = i;
		}
	}
	treearr[currmin].active = 0;

	return currmin;
}

void Encode(char charachter, char *buffer, struct node *treearr) {

	int i = 0;
	while (treearr[i].charachter != charachter) {
		i++;
	}

	struct node *ptr = &treearr[i];

	int currpos = 0;
	while (ptr->parent != NULL) {

		if (ptr == ptr->parent->left) {
			buffer[currpos] = '0';
			currpos++;
		}
		if (ptr == ptr->parent->right) {
			buffer[currpos] = '1';
			currpos++;
		}

		ptr = ptr->parent;
	}
	buffer[currpos] = '\0';

	for (int j = 0; j < currpos / 2; j++) {
		char tmp;
		tmp = buffer[j];
		buffer[j] = buffer[currpos - 1 - j];
		buffer[currpos - 1 - j] = tmp;
	}
}

void Unpack(char symbol, char *buffer) {

	unsigned char in = symbol, tmp;
	for (int i = 0; i < 8; i++)
	{
		tmp = in % 2;
		if (tmp == 0) {
			buffer[i] = '0';
		}
		if (tmp == 1) {
			buffer[i] = '1';
		}
		in = in / 2;
	}
	buffer[8] = '\0';
}

char Pack(char bigbuffer[]) {

	unsigned char x = 0;
	for (int i = 0; i < 8; i++) {
		if (bigbuffer[7 - i] == '1') {
			x++;
		}
		if (i < 7) {
			x = x << 1;
		}
	}
	bigbuffer[8] = '\0';
	return x;
}

void Submit(FILE* zippedfile, char *buffer) {
	for (int i = 0; i < (int)strlen(buffer); i++) {
		SubmitOne(zippedfile, buffer[i]);
	}
}

void SubmitOne(FILE* zippedfile, char currentbyte) {

	bigbuffer[bbend] = currentbyte;
	bbend++;
	bigbuffer[bbend] = '\0';
	if (bbend == 8) {
		char packedbyte = Pack(bigbuffer);
		fwrite(&packedbyte, 1, 1, zippedfile);
		bbend = 0;
	}
}

void PackTree(FILE* zippedfile, struct node *treearr, struct node *n) {

	char buffer[9];

	if (n->left != NULL) {
		Submit(zippedfile, "0"); 
		PackTree(zippedfile, treearr, n->left);
	}
	else
	{
		Submit(zippedfile, "1");
		Unpack(n->charachter, buffer);
		Submit(zippedfile, buffer);
	}

	if (n->right != NULL) {
		PackTree(zippedfile, treearr, n->right);
	}
}

int DecodeFile(FILE *zipped, FILE *unzipped) {

	if (zipped == NULL) {
		return 1;
	}

	size_t datasize;
	fread(&datasize, sizeof(size_t), 1, zipped);

	bbend = 8;

	struct node *root = UnpackTree(zipped);

	char symbol;

	for (int i = 0; i < (int)datasize; i++) {
		symbol = Decode(zipped, root);
		fwrite(&symbol, 1, 1, unzipped);
	}

	FreeTree(root);
	return 0;
}

struct node* UnpackTree(FILE* zipped) {

	char buf[9];
	if (FetchOne(zipped) == '0') {

		struct node *node = (struct node*)malloc(sizeof(struct node));

		node->left = UnpackTree(zipped);
		node->right = UnpackTree(zipped);

		return node;
	}
	else
	{
		Fetch(8, buf, zipped);
		struct node *leaf = (struct node*)malloc(sizeof(struct node));
		leaf->charachter = Pack(buf);
		leaf->left = NULL;
		leaf->right = NULL;
		return leaf;
	}
}

void Fetch(int bits_count, char* buf, FILE *zipped) { 

	for (int i = 0; i < bits_count; i++) {

		buf[i] = FetchOne(zipped);
	}
	buf[bits_count] = '\0';
}

char FetchOne(FILE* zipped) { 

	char tmp;
	if (bbend >= 8) {

		fread(&tmp, 1, 1, zipped);
		Unpack(tmp, bigbuffer);
		bbend = 0;
	}
	return bigbuffer[bbend++]; 
}

char Decode(FILE *zipped, struct node *root) {

	while (root->left != NULL) {

		if (FetchOne(zipped) == '0') {
			root = root->left;
		}
		else
		{
			root = root->right;
		}
	}
	return root->charachter;
}

void FreeTree(struct node *root) {

	if (root != NULL) {
		FreeTree(root->right);
		FreeTree(root->left);
		free(root);
	}
}
