#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define GetHeight(p) ((p)? (p)->height: 0)

struct node {

	int key;
	unsigned char height;
	struct node *left;
	struct node *right;
};

void AddToTree(struct node** root, int key);
void AddRecursive(struct node** root, struct node* newnode);
void FixHeight(struct node* p);
struct node* LeftRotation(struct node *p);
struct node* RightRotation(struct node *p);
void Balance(struct node** pp);
void DeleteNode(struct node * p);


int main() {

	int nodescount = 0, key = 0;
	struct node* root = NULL;

	scanf("%d", &nodescount);

	for (int i = 0; i < nodescount; i++) { 
		scanf("%d", &key);
		struct node *newnode = (struct node*)malloc(sizeof(struct node));
		newnode->key = key;
		newnode->left = NULL;
		newnode->right = NULL;
		newnode->height = 1;

		AddRecursive(&root, newnode);
	}

	printf("%d\n", GetHeight(root));

	DeleteNode(root);

	return 0;
}


void AddToTree(struct node** root, int key) {

	struct node *newnode = (struct node*)malloc(sizeof(struct node));
	newnode->key = key;
	newnode->left = NULL;
	newnode->right = NULL;
	newnode->height = 1;

	AddRecursive(root, newnode);
}

void AddRecursive(struct node** proot, struct node* newnode) {
	struct node *root = *proot;
	if (root == NULL) {

		*proot = newnode;
	}
	else
	{

		if (newnode->key <= (root)->key) { 

			if ((root)->left != NULL) {
				AddRecursive(&((root)->left), newnode);
			}
			else
			{
				(root)->left = newnode;
			}
		}

		if (newnode->key > (root)->key) {

			if ((root)->right != NULL) {
				AddRecursive(&((root)->right), newnode);
			}
			else
			{
				(root)->right = newnode;
			}
		}
	}

	Balance(proot);
}

void FixHeight(struct node* p) {
	int l = GetHeight(p->left), r = GetHeight(p->right);
	if (r >= l)
	{
		p->height = r + 1;
	}
	else if (r < l)
	{
		p->height = l + 1;
	}
}

struct node* LeftRotation(struct node *p) {

	struct node *q = p->right;
	p->right = q->left;
	q->left = p;
	FixHeight(p);
	FixHeight(q);
	return q;
}
struct node* RightRotation(struct node *p) {

	struct node* q = p->left;
	p->left = q->right;
	q->right = p;
	FixHeight(p);
	FixHeight(q);
	return q;
}


void Balance(struct node** pp)
{
	struct node* p = *pp;
	FixHeight(p);
	if (p != NULL)
	{
		if ((p->right) != NULL)
		{
			if (GetHeight(p->right) - GetHeight(p->left) == 2)
			{
				if (GetHeight(p->right->right) < GetHeight(p->right->left))
				{
					p->right = RightRotation(p->right);
					*pp = LeftRotation(p);
					return;
				}
				else
				{
					*pp = LeftRotation(p);
					return;
				}
			}
		}
		if ((p->left) != NULL)
		{
			if (GetHeight(p->right) - GetHeight(p->left) == -2)
			{
				if (GetHeight(p->left->left) < GetHeight(p->left->right))
				{
					p->left = LeftRotation(p->left);
					*pp = RightRotation(p);
					return;
				}
				else
				{
					*pp = RightRotation(p);
					return;
				}
			}
		}
	}
	return ;
}

void DeleteNode(struct node * p)
{
	if (p != NULL) {

		if (p->left != NULL)
			DeleteNode(p->left);
		if (p->right != NULL)
			DeleteNode(p->right);
	}
	free(p);
}
